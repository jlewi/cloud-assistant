syntax = "proto3";

option go_package = "github.com/jlewi/cloud-assistant/protos/gen/cassie";


// -------------------------------------------------------------------------
// Assertions
// -------------------------------------------------------------------------
message Assertion {

  // What we are checking for.
  enum Type {
    TYPE_UNSPECIFIED        = 0;
    TYPE_SHELL_REQUIRED_FLAG = 1;  // Were all required CLI flags present?
    TYPE_TOOL_INVOKED        = 2;  // Was a tool invoked (or not)?
    TYPE_FILE_RETRIEVED      = 3;  // Was a file retrieved (or not)?
    TYPE_LLM_JUDGE           = 4;  // Ask an LLM to grade the final answer.
  }

  // Outcome of an assertion after a test run.
  enum Result {
    RESULT_UNKNOWN = 0;
    RESULT_PASSED  = 1;
    RESULT_FAILED  = 2;
    RESULT_SKIPPED = 3;
  }

  string  name   = 1;  // e.g. "kubectl_has_context_flag"
  Type    type   = 2;
  Result  result = 3;

  // Exactly one concrete assertion payload must be present.
  oneof payload {
    ShellRequiredFlag shell_required_flag = 4;
    ToolInvocation    tool_invocation     = 5;
    FileRetrieval     file_retrieval      = 6;
    LlmJudge          llm_judge           = 7;
  }

  // -------------------- Payload messages ---------------------------------

  // Verifies that a shell command includes specific flags.
  message ShellRequiredFlag {
    string           command = 1;                 // e.g. "kubectl"
    repeated string  flags   = 2;                 // e.g. ["--context"]
  }

  // Verifies that a tool **is** or **is not** invoked.
  message ToolInvocation {
    string tool_name = 1;                         // e.g. "file_search"
    bool   should_invoke = 2;                     // true = must invoke, false = must NOT invoke
  }

  // Verifies that a file **is** or **is not** retrieved.
  message FileRetrieval {
    string file_id   = 1;
    string file_name = 2;                         // Optional human-readable name
    bool   should_retrieve = 3;                   // true = must retrieve, false = must NOT retrieve
  }

  // Asks an LLM to grade the assistant’s answer.
  message LlmJudge {
    string    judge_prompt = 1;
    bool      should_pass  = 2;                   // true = model must return “correct”
  }
}

// -------------------------------------------------------------------------
// Test sample – a full input plus its assertions
// -------------------------------------------------------------------------
message EvalSample {
  string            name        = 1;              // e.g. "aks_required_flags"
  string            description = 2;              // Optional human description
  string            input_text  = 3;              // The assistant input to test
  repeated Assertion assertions = 4;              // Checks to run against that input
}

message EvalDataset{
  repeated EvalSample samples = 1;
}