import { z } from 'zod';
import { ResolveProgramRequest_Mode } from './extension/grpc/runner/v1';
export declare const AnnotationSchema: {
    'runme.dev/id': z.ZodOptional<z.ZodString>;
    'runme.dev/name': z.ZodOptional<z.ZodString>;
    'runme.dev/nameGenerated': z.ZodOptional<z.ZodEffects<z.ZodBoolean, boolean, unknown>>;
    'runme.dev/fenced': z.ZodOptional<z.ZodEffects<z.ZodBoolean, boolean, unknown>>;
    id: z.ZodOptional<z.ZodString>;
    background: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    interactive: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    closeTerminalOnSuccess: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    openTerminalOnError: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    promptEnv: z.ZodEffects<z.ZodDefault<z.ZodNativeEnum<typeof ResolveProgramRequest_Mode>>, ResolveProgramRequest_Mode, unknown>;
    excludeFromRunAll: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    terminalRows: z.ZodEffects<z.ZodOptional<z.ZodNumber>, number | undefined, unknown>;
    name: z.ZodEffects<z.ZodDefault<z.ZodString>, string, unknown>;
    mimeType: z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>;
    interpreter: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    cwd: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    category: z.ZodDefault<z.ZodString>;
};
export declare const SafeCellAnnotationsSchema: z.ZodObject<{
    background: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    interactive: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    closeTerminalOnSuccess: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    openTerminalOnError: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    'runme.dev/id': z.ZodOptional<z.ZodString>;
    'runme.dev/name': z.ZodOptional<z.ZodString>;
    'runme.dev/nameGenerated': z.ZodOptional<z.ZodEffects<z.ZodBoolean, boolean, unknown>>;
    'runme.dev/fenced': z.ZodOptional<z.ZodEffects<z.ZodBoolean, boolean, unknown>>;
    id: z.ZodOptional<z.ZodString>;
    promptEnv: z.ZodEffects<z.ZodDefault<z.ZodNativeEnum<typeof ResolveProgramRequest_Mode>>, ResolveProgramRequest_Mode, unknown>;
    excludeFromRunAll: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    terminalRows: z.ZodEffects<z.ZodOptional<z.ZodNumber>, number | undefined, unknown>;
    name: z.ZodEffects<z.ZodDefault<z.ZodString>, string, unknown>;
    mimeType: z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>;
    interpreter: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    cwd: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    category: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    background: boolean;
    interactive: boolean;
    closeTerminalOnSuccess: boolean;
    openTerminalOnError: boolean;
    promptEnv: ResolveProgramRequest_Mode;
    excludeFromRunAll: boolean;
    name: string;
    interpreter: string;
    cwd: string;
    category: string;
    'runme.dev/id'?: string | undefined;
    'runme.dev/name'?: string | undefined;
    'runme.dev/nameGenerated'?: boolean | undefined;
    'runme.dev/fenced'?: boolean | undefined;
    id?: string | undefined;
    terminalRows?: number | undefined;
    mimeType?: string | undefined;
}, {
    background?: unknown;
    interactive?: unknown;
    closeTerminalOnSuccess?: unknown;
    openTerminalOnError?: unknown;
    'runme.dev/id'?: string | undefined;
    'runme.dev/name'?: string | undefined;
    'runme.dev/nameGenerated'?: unknown;
    'runme.dev/fenced'?: unknown;
    id?: string | undefined;
    promptEnv?: unknown;
    excludeFromRunAll?: unknown;
    terminalRows?: unknown;
    name?: unknown;
    mimeType?: string | undefined;
    interpreter?: string | undefined;
    cwd?: string | undefined;
    category?: string | undefined;
}>;
export declare const SafeNotebookAnnotationsSchema: z.ZodObject<{
    id: z.ZodString;
    version: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    version: string;
}, {
    id: string;
    version: string;
}>;
export declare const CellAnnotationsSchema: z.ZodObject<{
    'runme.dev/id': z.ZodOptional<z.ZodString>;
    'runme.dev/name': z.ZodOptional<z.ZodString>;
    'runme.dev/nameGenerated': z.ZodOptional<z.ZodEffects<z.ZodBoolean, boolean, unknown>>;
    'runme.dev/fenced': z.ZodOptional<z.ZodEffects<z.ZodBoolean, boolean, unknown>>;
    id: z.ZodOptional<z.ZodString>;
    background: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    interactive: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    closeTerminalOnSuccess: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    openTerminalOnError: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    promptEnv: z.ZodEffects<z.ZodDefault<z.ZodNativeEnum<typeof ResolveProgramRequest_Mode>>, ResolveProgramRequest_Mode, unknown>;
    excludeFromRunAll: z.ZodEffects<z.ZodBoolean, boolean, unknown>;
    terminalRows: z.ZodEffects<z.ZodOptional<z.ZodNumber>, number | undefined, unknown>;
    name: z.ZodEffects<z.ZodDefault<z.ZodString>, string, unknown>;
    mimeType: z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>;
    interpreter: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    cwd: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    category: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    background: boolean;
    interactive: boolean;
    closeTerminalOnSuccess: boolean;
    openTerminalOnError: boolean;
    promptEnv: ResolveProgramRequest_Mode;
    excludeFromRunAll: boolean;
    name: string;
    interpreter: string;
    cwd: string;
    category: string;
    'runme.dev/id'?: string | undefined;
    'runme.dev/name'?: string | undefined;
    'runme.dev/nameGenerated'?: boolean | undefined;
    'runme.dev/fenced'?: boolean | undefined;
    id?: string | undefined;
    terminalRows?: number | undefined;
    mimeType?: string | undefined;
}, {
    background?: unknown;
    interactive?: unknown;
    closeTerminalOnSuccess?: unknown;
    openTerminalOnError?: unknown;
    'runme.dev/id'?: string | undefined;
    'runme.dev/name'?: string | undefined;
    'runme.dev/nameGenerated'?: unknown;
    'runme.dev/fenced'?: unknown;
    id?: string | undefined;
    promptEnv?: unknown;
    excludeFromRunAll?: unknown;
    terminalRows?: unknown;
    name?: unknown;
    mimeType?: string | undefined;
    interpreter?: string | undefined;
    cwd?: string | undefined;
    category?: string | undefined;
}>;
