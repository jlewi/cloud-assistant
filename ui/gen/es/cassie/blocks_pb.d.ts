// @generated by protoc-gen-es v2.2.3 with parameter "target=dts,import_extension=none,json_types=true"
// @generated from file cassie/blocks.proto (syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { FileSearchResult, FileSearchResultJson } from "./filesearch_pb";

/**
 * Describes the file cassie/blocks.proto.
 */
export declare const file_cassie_blocks: GenFile;

/**
 * @generated from message Block
 */
export declare type Block = Message<"Block"> & {
  /**
   * BlockKind is an enum indicating what type of block it is e.g text or output
   *
   * @generated from field: BlockKind kind = 1;
   */
  kind: BlockKind;

  /**
   * language is a string identifying the language.
   *
   * @generated from field: string language = 2;
   */
  language: string;

  /**
   * contents is the actual contents of the block.
   * Not the outputs of the block.
   *
   * @generated from field: string contents = 3;
   */
  contents: string;

  /**
   * ID of the block.
   *
   * @generated from field: string id = 7;
   */
  id: string;

  /**
   * Additional metadata
   *
   * @generated from field: map<string, string> metadata = 8;
   */
  metadata: { [key: string]: string };

  /**
   * @generated from field: BlockRole role = 9;
   */
  role: BlockRole;

  /**
   * @generated from field: repeated FileSearchResult file_search_results = 10;
   */
  fileSearchResults: FileSearchResult[];
};

/**
 * @generated from message Block
 */
export declare type BlockJson = {
  /**
   * BlockKind is an enum indicating what type of block it is e.g text or output
   *
   * @generated from field: BlockKind kind = 1;
   */
  kind?: BlockKindJson;

  /**
   * language is a string identifying the language.
   *
   * @generated from field: string language = 2;
   */
  language?: string;

  /**
   * contents is the actual contents of the block.
   * Not the outputs of the block.
   *
   * @generated from field: string contents = 3;
   */
  contents?: string;

  /**
   * ID of the block.
   *
   * @generated from field: string id = 7;
   */
  id?: string;

  /**
   * Additional metadata
   *
   * @generated from field: map<string, string> metadata = 8;
   */
  metadata?: { [key: string]: string };

  /**
   * @generated from field: BlockRole role = 9;
   */
  role?: BlockRoleJson;

  /**
   * @generated from field: repeated FileSearchResult file_search_results = 10;
   */
  fileSearchResults?: FileSearchResultJson[];
};

/**
 * Describes the message Block.
 * Use `create(BlockSchema)` to create a new message.
 */
export declare const BlockSchema: GenMessage<Block, BlockJson>;

/**
 * @generated from message GenerateRequest
 */
export declare type GenerateRequest = Message<"GenerateRequest"> & {
  /**
   * @generated from field: repeated Block blocks = 1;
   */
  blocks: Block[];
};

/**
 * @generated from message GenerateRequest
 */
export declare type GenerateRequestJson = {
  /**
   * @generated from field: repeated Block blocks = 1;
   */
  blocks?: BlockJson[];
};

/**
 * Describes the message GenerateRequest.
 * Use `create(GenerateRequestSchema)` to create a new message.
 */
export declare const GenerateRequestSchema: GenMessage<GenerateRequest, GenerateRequestJson>;

/**
 * @generated from message GenerateResponse
 */
export declare type GenerateResponse = Message<"GenerateResponse"> & {
  /**
   * @generated from field: repeated Block blocks = 1;
   */
  blocks: Block[];
};

/**
 * @generated from message GenerateResponse
 */
export declare type GenerateResponseJson = {
  /**
   * @generated from field: repeated Block blocks = 1;
   */
  blocks?: BlockJson[];
};

/**
 * Describes the message GenerateResponse.
 * Use `create(GenerateResponseSchema)` to create a new message.
 */
export declare const GenerateResponseSchema: GenMessage<GenerateResponse, GenerateResponseJson>;

/**
 * @generated from enum BlockKind
 */
export enum BlockKind {
  /**
   * @generated from enum value: UNKNOWN_BLOCK_KIND = 0;
   */
  UNKNOWN_BLOCK_KIND = 0,

  /**
   * @generated from enum value: MARKUP = 1;
   */
  MARKUP = 1,

  /**
   * @generated from enum value: CODE = 2;
   */
  CODE = 2,

  /**
   * @generated from enum value: FILE_SEARCH_RESULTS = 3;
   */
  FILE_SEARCH_RESULTS = 3,
}

/**
 * @generated from enum BlockKind
 */
export declare type BlockKindJson = "UNKNOWN_BLOCK_KIND" | "MARKUP" | "CODE" | "FILE_SEARCH_RESULTS";

/**
 * Describes the enum BlockKind.
 */
export declare const BlockKindSchema: GenEnum<BlockKind, BlockKindJson>;

/**
 * @generated from enum BlockRole
 */
export enum BlockRole {
  /**
   * @generated from enum value: BLOCK_ROLE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: BLOCK_ROLE_USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: BLOCK_ROLE_ASSISTANT = 2;
   */
  ASSISTANT = 2,
}

/**
 * @generated from enum BlockRole
 */
export declare type BlockRoleJson = "BLOCK_ROLE_UNKNOWN" | "BLOCK_ROLE_USER" | "BLOCK_ROLE_ASSISTANT";

/**
 * Describes the enum BlockRole.
 */
export declare const BlockRoleSchema: GenEnum<BlockRole, BlockRoleJson>;

/**
 * BlocksService generates blocks.
 *
 * @generated from service BlocksService
 */
export declare const BlocksService: GenService<{
  /**
   * Generate generates blocks. Responses are streamed.
   *
   * @generated from rpc BlocksService.Generate
   */
  generate: {
    methodKind: "server_streaming";
    input: typeof GenerateRequestSchema;
    output: typeof GenerateResponseSchema;
  },
}>;
